; References:
;   https://www.smspower.org/Development/SN76489, which links to:
;   https://www.smspower.org/forums/9686-VoiceEmulationOnTheSMS#44103
;   which is offline but has been forked and tweaked:
;   https://github.com/maxim-zhao/wav_to_psg

; System VIA addresses needed to talk to the sound chip.
system_via_outb = $fe40
; TODO: Delete this if not used: system_via_outa = $fe41
system_via_outa_nh = $fe4f
system_via_ddra = $fe43

; User VIA addresses needed for timer interrupts.
user_via_t1c_l = $fe64
user_via_t1c_h = $fe65
user_via_t1l_l = $fe66
user_via_t1l_h = $fe67
user_via_acr = $fe6b
user_via_ifr = $fe6d
user_via_ier = $fe6e

; SN76489 constants.
sn_latch_tone    = %1000 << 4
sn_latch_volume  = %1001 << 4
sn_channel_shift = 5
sn_channel_0     = 0 << sn_channel_shift ; 0 is a tone channel in hardware, unlike OS where 0 is noise
sn_channel_1     = 1 << sn_channel_shift
sn_channel_2     = 2 << sn_channel_shift
sn_channel_3     = 3 << sn_channel_shift

; Frequency control: VIA is clocked at 1MHz and we need to subtract 2 to allow
; for the time taken to load the counter from the latch.
sample_rate = 8000 ; SFTODO 8000 ; Hz
timer_value = (1000000 / sample_rate) - 2

os_irq_a = $fc
irq1v = $204

macro set_sub_irq_handler target
    assert hi(target) == hi(sub_irq_handler_01_0)
    lda #lo(target)
    sta jmp_sub_irq_handler+1
endmacro

macro lsr_a4
    lsr a
    lsr a
    lsr a
    lsr a
endmacro

macro write_a_to_slow_databus
    ; Put the value in A on the slow databus. We must use the non-handshaking
    ; output register, despite the sample code in the AUG using the handshaking
    ; register at $fe41. Thanks to hexwab and tricky for pointing this out.
    sta system_via_outa_nh
    ; Use the addressable latch to toggle the sound chip write pin. See AUG
    ; section 23.2; the value we write to system_via_outb is %(PB3 PB2 PB1 PB0):
    ; - (PB2 PB1 PB0) selects one of the eight latch output bits;
    ;   %000 = SN76489 write enable
    ; - PB3 is the bit to write.
    lda #%0000
    sta system_via_outb
    ; We need 8us or 16 cycles between the two writes.
    ; TODO: tricky's suggestion - we should do some useful work in here - this is probably not too hard now we have six sub-handlers, but I haven't looked yet
    php        ; 3 cycles
    plp        ; 4 cycles
    php        ; 3 cycles
    plp        ; 4 cycles
    lda #%1000 ; 2 cycles
    sta system_via_outb
endmacro

macro return_from_irq
if TRUE ; SFTODO EXP
    lda os_irq_a
    rti
else
;assert FALSE ; this doesn't work but it's not currently clear why, need to come back to it
    lda os_irq_a ; TODO: not necessary? but play it safe while it doesn't work anyway
    jmp (jmp_parent_irq_handler+1) ; rti TODO: tricky points out this may cause keyboard interrupts which occur to be ignore
endif
endmacro

; TODO: I thought with -w beebasm would allow this to be called inc16, but it doesn't seem to work.
macro xinc16_ptr_and_return_from_irq
    inc ptr
    beq ptr_carry
    return_from_irq
endmacro

    org $2000
.start


; TODO: Factor commonality out of these via macros?

; We use six sub-handlers to save cycles on conditional logic, trading space for
; time. The sub-handler names have the form:
;   "sub_irq_handler_"
;   channel number of high nybble at ptr
;   channel number of low nybble at ptr
;   "_"
;   channel number to play on
;
; We iterate through the sequence:
;    01_0
;    01_1
;    20_2
;    20_0
;    12_1
;    12_2
; and then repeat this.

.sub_irq_handler_01_0
    lsr_a4
    ora #sn_latch_volume or sn_channel_0
    write_a_to_slow_databus
    set_sub_irq_handler sub_irq_handler_01_1
    return_from_irq

.sub_irq_handler_01_1
    and #%1111
    ora #sn_latch_volume or sn_channel_1
    write_a_to_slow_databus
    set_sub_irq_handler sub_irq_handler_20_2
    xinc16_ptr_and_return_from_irq

.sub_irq_handler_20_2
    lsr_a4
    ora #sn_latch_volume or sn_channel_2
    write_a_to_slow_databus
    set_sub_irq_handler sub_irq_handler_20_0
    return_from_irq

.sub_irq_handler_20_0
    and #%1111
    ora #sn_latch_volume or sn_channel_0
    write_a_to_slow_databus
    set_sub_irq_handler sub_irq_handler_12_1
    xinc16_ptr_and_return_from_irq

; This is in the middle so it's in branch range.
.ptr_carry
    inc ptr+1
    lda ptr+1
    ; We assume the sample always ends at a page boundary.
    ; TODO: We don't actually align it like this yet...
    cmp #>sample_end
    beq at_sample_end
    return_from_irq

.sub_irq_handler_12_1
    lsr_a4
    ora #sn_latch_volume or sn_channel_1
    write_a_to_slow_databus
    set_sub_irq_handler sub_irq_handler_12_2
    return_from_irq

.sub_irq_handler_12_2
    and #%1111
    ora #sn_latch_volume or sn_channel_2
    write_a_to_slow_databus
    set_sub_irq_handler sub_irq_handler_01_0
.restart_sample
    xinc16_ptr_and_return_from_irq

.at_sample_end
if FALSE ; TODO: this code stops sample playback and may be useful, for but now I want to loop the sample for ease of testing
    ; Remove our claim on the IRQ handler now we've finished.
    sei
    lda jmp_parent_irq_handler+1
    sta irq1v
    lda jmp_parent_irq_handler+2
    sta irq1v+1
    cli

    ; Disable user VIA timer 1 interrupt now we no longer need it.
    lda #%01000000
    sta user_via_ier
else
    ; TODO: copy and paste of code from "init"; should maybe factor out in a proper version.
    lda #<(sample-1)
    sta ptr
    lda #>(sample-1)
    sta ptr+1
    jmp restart_sample ; TODO: could probably bne always to save a byte
endif

.not_timer_1_interrupt
.jmp_parent_irq_handler
    jmp $ffff ; patched during initialisation

    ; This does *not* preserve X or Y, so we can only use A. TODO MAKE SURE THAT'S TRUE!
.our_irq_handler
    ; An interrupt has occurred; is it timer 1?
    bit user_via_ifr
    bpl not_timer_1_interrupt

    ; The 6502 automatically disables interrupts when processing an interrupt
    ; and the OS doesn't automatically re-enable them. We will leave them
    ; disabled, so we don't need to worry about saving os_irq_a on the stack.
    ; By the time we've written to the slow databus there is so little left to
    ; do it would probably be a net loss to try to re-enable interrupts straight
    ; away - we'd have to do extra work to save os_irq_a before re-enabling them.

    ; Clear timer 1 interrupt flag.
    lda user_via_t1c_l

    ; TODO: It's probably not helpful, but we could maybe check the current timer 1
    ; value to work out if we're running slow. Although I suppose the best we could
    ; do would be to notice if we've slipped enough that we should just omit an
    ; entire sample value to "catch up", and that probably requires more than just
    ; checking the timer 1 value. We also obviously don't want to waste too many
    ; cycles here either. Just a thought.

    ; Set slow databus up for write.
    ; TODO: We may be able to avoid doing this every time, but probably safest not to.
    lda #$ff
    sta system_via_ddra

    ; Play the next part of the sample.
.lda_abs_ptr
ptr = lda_abs_ptr+1
    lda $ffff ; patched at runtime
.jmp_sub_irq_handler
    jmp sub_irq_handler_01_0 ; low byte patched at runtime


; Write the byte in A to the sound chip (via the slow databus). Unlike the
; macro, this explicitly disables and re-enables interrupts; the AUG says we
; must do all slow databus access with interrupts disabled.
.write_a
    sei
    ; Set slow databus up for write.
    ; TODO: We may be able to avoid doing this every time, but probably safest not to.
    ldy #$ff
    sty system_via_ddra

    write_a_to_slow_databus
    cli
    rts


    ; TODO: This works on BeebEm, jsbeeb and b-em, *but* in b-em logical keyboard mode seems to be
    ; incompatible and causes all keyboard input to be lost. I suspect this is a side-effect of
    ; keypresses getting lost (which I think happens in all emulators) due to interrupts spending
    ; so much time disabled. It's not ideal but apart from improving the responsiveness generally,
    ; it's probably acceptable for this to be the case. Should have a permanent comment documenting
    ; it if it remains an issue though. - OK, I'm not sure that's right. I am seeing frozen keyboard
    ; in b-em even without logical keyboard mode, and even if I set sample rate down to 1000 it is
    ; still not working in b-em. - OK^2, maybe that was right. Really don't know. It is behaving
    ; itself in b-em now in physical keyboard mode, keyboard is a little unresponsive but not utterly
    ; terrible. - OK^3, I just tried again and the first execution left keyboard stuck, but BREAK
    ; and a retry left keyboard working while this was running. Something weird going on.
.init
    ; Set tone for channels 0-2 to 1. smspower.org says this can be 0 or 1, but
    ; advice from tricky on stardot suggests this has to be 1 on the Beeb. TODO:
    ; I haven't actually tried 0, but since I'm using emulators it's possible 0
    ; would work there but not on real hardware.
    lda #sn_latch_tone or sn_channel_0 or 1 ; low bits of tone are 1
.set_tone_loop
    pha
    jsr write_a
    lda #0 ; high bits of tone are 0
    jsr write_a
    pla
    clc
    adc #1<<sn_channel_shift
    cmp #sn_latch_tone or sn_channel_3 or 1
    bne set_tone_loop

    ; Patch self-modifying code with initial values: start playing the high
    ; nybble of the first byte of the sample on channel 0.
    lda #<sample
    sta ptr
    lda #>sample
    sta ptr+1
    set_sub_irq_handler sub_irq_handler_01_0

    sei

    ; Install our interrupt handler.
    lda irq1v
    sta jmp_parent_irq_handler+1
    lda irq1v+1
    sta jmp_parent_irq_handler+2
    lda #<our_irq_handler
    sta irq1v
    lda #>our_irq_handler
    sta irq1v+1

    ; Set initial user VIA timer 1 value. TODO: Do we need to do this? Probably...
    ; Set user VIA timer 1 latches at the same time so the interrupts recur.
    lda #<timer_value
    sta user_via_t1c_l
    sta user_via_t1l_l
    lda #>timer_value
    sta user_via_t1c_h
    sta user_via_t1l_h

    ; Set user VIA timer 1 to free run/continuous mode generating interrupts.
    lda #%01000000
    sta user_via_acr

    ; Enable user VIA timer 1 interrupt.
    lda #%11000000
    sta user_via_ier

    cli
    rts


    ; Our samples are 4-bit values packed into bytes with the first value in the
    ; high bits.
.sample
    ; incbin "sine-440hz-8khz-mono.wav.psg.bin"
    ; incbin "brush-strokes-8khz-mono.wav.psg.bin"
    incbin "brush-strokes-8khz-mono.wav.pcmenc"
.sample_end


.end

save "test", start, end, init
